const Utils = require('../utils')

describe('Employee Screen Tests', () => {
  before(async () => {
    await device.reloadReactNative()
    await Utils.loginAsUser()
  })
  after(async () => {
    await Utils.goBack()
    await Utils.goBack()
    await Utils.logout()
  })

  beforeEach(async () => {
    await device.reloadReactNative()
    await navigateToEmployeeScreen()
  })

  const navigateToEmployeeScreen = async () => {
    await expect(element(by.id('launchScreen'))).toBeVisible()
    await element(by.id('menuButton')).tap()
    await element(by.id('entitiesDrawerButton')).tap()
    await Utils.scrollTo('employeeEntityScreenButton', 'entityScreenScrollList')
    await element(by.id('employeeEntityScreenButton')).tap()
  }

  it('should allow you to create an entity', async () => {
    await expect(element(by.id('employeeScreen'))).toBeVisible()
    await expect(element(by.text('Create'))).toBeVisible()
    // create
    await element(by.id('employeeCreateButton')).tap()
    await Utils.scrollTo('firstNameInput', 'employeeEditScrollView')
    await element(by.id('firstNameInput')).replaceText('sample-data')
    await Utils.scrollTo('lastNameInput', 'employeeEditScrollView')
    await element(by.id('lastNameInput')).replaceText('sample-data')
    await Utils.scrollTo('emailInput', 'employeeEditScrollView')
    await element(by.id('emailInput')).replaceText('sample-data')
    await Utils.scrollTo('phoneNumberInput', 'employeeEditScrollView')
    await element(by.id('phoneNumberInput')).replaceText('sample-data')
    await Utils.scrollTo('salaryInput', 'employeeEditScrollView')
    await element(by.id('salaryInput')).replaceText('123')
    await Utils.scrollTo('commissionPctInput', 'employeeEditScrollView')
    await element(by.id('commissionPctInput')).replaceText('123')
    await element(by.id('submitButton')).tap()
    await element(by.text('View')).tap()
    await Utils.scrollTo('firstName', 'employeeDetailScrollView')
    await expect(element(by.id('firstName'))).toHaveText('FirstName: sample-data')
    await Utils.scrollTo('lastName', 'employeeDetailScrollView')
    await expect(element(by.id('lastName'))).toHaveText('LastName: sample-data')
    await Utils.scrollTo('email', 'employeeDetailScrollView')
    await expect(element(by.id('email'))).toHaveText('Email: sample-data')
    await Utils.scrollTo('phoneNumber', 'employeeDetailScrollView')
    await expect(element(by.id('phoneNumber'))).toHaveText('PhoneNumber: sample-data')
    await Utils.scrollTo('salary', 'employeeDetailScrollView')
    await expect(element(by.id('salary'))).toHaveText('Salary: 123')
    await Utils.scrollTo('commissionPct', 'employeeDetailScrollView')
    await expect(element(by.id('commissionPct'))).toHaveText('CommissionPct: 123')
    // update
    await element(by.text('EDIT')).tap()
    await Utils.scrollTo('firstNameInput', 'employeeEditScrollView')
    await element(by.id('firstNameInput')).replaceText('sample-data-2')
    await Utils.scrollTo('lastNameInput', 'employeeEditScrollView')
    await element(by.id('lastNameInput')).replaceText('sample-data-2')
    await Utils.scrollTo('emailInput', 'employeeEditScrollView')
    await element(by.id('emailInput')).replaceText('sample-data-2')
    await Utils.scrollTo('phoneNumberInput', 'employeeEditScrollView')
    await element(by.id('phoneNumberInput')).replaceText('sample-data-2')
    await Utils.scrollTo('salaryInput', 'employeeEditScrollView')
    await element(by.id('salaryInput')).replaceText('1234')
    await Utils.scrollTo('commissionPctInput', 'employeeEditScrollView')
    await element(by.id('commissionPctInput')).replaceText('1234')
    await element(by.id('submitButton')).tap()
    await element(by.text('OK')).tap()
    await expect(element(by.id('firstName'))).toHaveText('FirstName: sample-data-2')
    await expect(element(by.id('lastName'))).toHaveText('LastName: sample-data-2')
    await expect(element(by.id('email'))).toHaveText('Email: sample-data-2')
    await expect(element(by.id('phoneNumber'))).toHaveText('PhoneNumber: sample-data-2')
    await expect(element(by.id('salary'))).toHaveText('Salary: 1234')
    await expect(element(by.id('commissionPct'))).toHaveText('CommissionPct: 1234')
    // delete
    await element(by.text('DELETE')).tap()
    await element(by.text('OK')).tap()
    await expect(element(by.id('employeeScreen'))).toBeVisible()
  })
})
